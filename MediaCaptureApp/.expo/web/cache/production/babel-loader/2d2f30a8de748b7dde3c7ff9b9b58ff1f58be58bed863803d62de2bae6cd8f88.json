{"ast":null,"code":"\"use strict\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{CommonActions,getActionFromState,getPathFromState,getStateFromPath,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import{LinkingContext}from\"./LinkingContext.js\";var _getRootStateForNavigate=function getRootStateForNavigate(navigation,state){var parent=navigation.getParent();if(parent){var parentState=parent.getState();return _getRootStateForNavigate(parent,{index:0,routes:[_objectSpread(_objectSpread({},parentState.routes[parentState.index]),{},{state:state})]});}return state;};export function useLinkBuilder(){var navigation=React.useContext(NavigationHelpersContext);var linking=React.useContext(LinkingContext);var buildHref=React.useCallback(function(name,params){var options=linking.options;if((options==null?void 0:options.enabled)===false){return undefined;}var state=navigation?_getRootStateForNavigate(navigation,{index:0,routes:[{name:name,params:params}]}):{index:0,routes:[{name:name,params:params}]};var path=options!=null&&options.getPathFromState?options.getPathFromState(state,options==null?void 0:options.config):getPathFromState(state,options==null?void 0:options.config);return path;},[linking,navigation]);var buildAction=React.useCallback(function(href){if(!href.startsWith('/')){throw new Error(\"The href must start with '/' (\"+href+\").\");}var options=linking.options;var state=options!=null&&options.getStateFromPath?options.getStateFromPath(href,options.config):getStateFromPath(href,options==null?void 0:options.config);if(state){var action=getActionFromState(state,options==null?void 0:options.config);return action!=null?action:CommonActions.reset(state);}else{throw new Error('Failed to parse the href to a navigation state.');}},[linking]);return{buildHref:buildHref,buildAction:buildAction};}","map":{"version":3,"names":["CommonActions","getActionFromState","getPathFromState","getStateFromPath","NavigationHelpersContext","React","LinkingContext","getRootStateForNavigate","navigation","state","parent","getParent","parentState","getState","index","routes","_objectSpread","useLinkBuilder","useContext","linking","buildHref","useCallback","name","params","options","enabled","undefined","path","config","buildAction","href","startsWith","Error","action","reset"],"sources":["/home/runner/workspace/MediaCaptureApp/node_modules/@react-navigation/native/src/useLinkBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  type NavigationHelpers,\n  NavigationHelpersContext,\n  type NavigationProp,\n  type ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { LinkingContext } from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Helpers to build href or action based on the linking options.\n * @returns `buildHref` to build an `href` for screen and `buildAction` to build an action from an `href`.\n */\nexport function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildHref = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  const buildAction = React.useCallback(\n    (href: string) => {\n      if (!href.startsWith('/')) {\n        throw new Error(`The href must start with '/' (${href}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(href, options.config)\n        : getStateFromPath(href, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        return action ?? CommonActions.reset(state);\n      } else {\n        throw new Error('Failed to parse the href to a navigation state.');\n      }\n    },\n    [linking]\n  );\n\n  return {\n    buildHref,\n    buildAction,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}