{"ast":null,"code":"\"use strict\";import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{LinkingContext}from\"./LinkingContext.js\";var _getStateFromParams=function getStateFromParams(params){if(params!=null&&params.state){return params.state;}if(params!=null&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?_getStateFromParams(params.params):undefined}]};}return undefined;};export function useLinkProps(_ref){var _options$getPathFromS;var screen=_ref.screen,params=_ref.params,href=_ref.href,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var _React$useContext=React.useContext(LinkingContext),options=_React$useContext.options;var onPress=function onPress(e){var _e$currentTarget;var hasModifierKey=e.metaKey||e.altKey||e.ctrlKey||e.shiftKey;var isLeftClick=e.button==null||e.button===0;var isSelfTarget=[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)==null?void 0:_e$currentTarget.target);var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=true;}else if(!hasModifierKey&&isLeftClick&&isSelfTarget){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{navigation==null?void 0:navigation.navigate(screen,params);}}};var getPathFromStateHelper=(_options$getPathFromS=options==null?void 0:options.getPathFromState)!=null?_options$getPathFromS:getPathFromState;return{href:href!=null?href:Platform.OS==='web'&&screen!=null?getPathFromStateHelper({routes:[{name:screen,params:params,state:_getStateFromParams(params)}]},options==null?void 0:options.config):undefined,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_options$getPathFromS","href","action","root","useContext","navigation","_React$useContext","options","onPress","e","_e$currentTarget","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","includes","currentTarget","target","shouldHandle","OS","preventDefault","dispatch","Error","navigate","getPathFromStateHelper","config","accessibilityRole"],"sources":["/home/runner/workspace/MediaCaptureApp/node_modules/@react-navigation/native/src/useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  type NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  type NavigatorScreenParams,\n  type ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { type GestureResponderEvent, Platform } from 'react-native';\n\nimport { LinkingContext } from './LinkingContext';\n\nexport type LinkProps<\n  ParamList extends ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList,\n> =\n  | ({\n      href?: string;\n      action?: NavigationAction;\n    } & {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? { screen: Screen; params?: ParamList[Screen] }\n        : { screen: Screen; params: ParamList[Screen] };\n    }[RouteName])\n  | {\n      href?: string;\n      action: NavigationAction;\n      screen?: undefined;\n      params?: undefined;\n    };\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error this is fine ðŸ”¥\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport function useLinkProps<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  href,\n  action,\n}: LinkProps<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n    const isSelfTarget = [undefined, null, '', 'self'].includes(\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      e.currentTarget?.target\n    ); // let browser handle \"target=_blank\" etc.\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        // @ts-expect-error This is already type-checked by the prop types\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  return {\n    href:\n      href ??\n      (Platform.OS === 'web' && screen != null\n        ? getPathFromStateHelper(\n            {\n              routes: [\n                {\n                  // @ts-expect-error this is fine ðŸ”¥\n                  name: screen,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  params: params,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  state: getStateFromParams(params),\n                },\n              ],\n            },\n            options?.config\n          )\n        : undefined),\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}